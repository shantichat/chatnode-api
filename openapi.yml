openapi: 3.1.0

info:
  title: ChatNode API
  description: REST API prototype (unstalbe, still in active development)
  version: 0.1.0

servers:
  - url: https://shantichat.com

paths:

  /api/v1/state/:
    get:
      summary: "Server state"
      description: "Information about server parameters. Alse can be used as ping"
      operationId: getServerState
      tags: [ "core" ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    $ref: "#/components/schemas/ISODateTime"
                  extensions:
                    type: array
                    items:
                      type: string
                      example: ["msgreactions"]
                required:
                  - time
                  - extensions

  /api/v1/users/:
    get:
      summary: "Search users"
      description: "Users lookup"
      operationId: getUserList
      tags: [ "core" ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /api/v1/users/{userUid}/:
    get:
      summary: "User information"
      description: "Full information about user"
      operationId: getUser
      tags: [ "core" ]
      parameters:
        - $ref: "#/components/parameters/userUid"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/v1/users/me/:
    get:
      summary: "Returns self contact"
      description: "Full information about self"
      operationId: getMe
      tags: [ "core" ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

## ext.invites ##

  /api/v1/invites/:
    get:
      summary: "Invitation codes"
      description: "Used and unused invitation codes"
      operationId: getInviteList
      tags: [ "invites" ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invite"
    post: 
      summary: "Create new invitation code"
      operationId: createInvite
      tags: [ "invites" ]
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invite"

  /api/v1/invites/{inviteUid}/:
    get:
      summary: "Invitation code"
      description: "Used and unused invitation codes"
      operationId: getInvite
      tags: [ "invites" ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invite"

  /api/v1/invites/preview/:
    post:
      summary: "Invitation preview"
      description: "Information about invitation accectablility and invitee"
      operationId: previewInvite
      tags: [ "invites" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  $ref: "#/components/schemas/InviteCode"
              required:
                - code
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitePreview"

  /api/v1/invites/accept/:
    post:
      summary: "Accept invite"
      description: "Information about invitation accectablility and invitee"
      operationId: acceptInvite
      tags: [ "invites" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  $ref: "#/components/schemas/InviteCode"
                username:
                  type: string
                name:
                  type: string
                password:
                  type: string
              required:
                - code
                - password
                - username
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '200':
          description: Already logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

## Components ##

components:
  
  parameters:

    userUid:
      name: userUid
      in: path
      required: true
      schema:
        type: string
        format: nanoid
        example: "njbusD52k6YoRG346tPgD"
  
  schemas:
  
    BaseEntity:
      title: "Base entity"
      type: object
      properties:
        uid:
          type: string
          format: nanoid
          example: "njbusD52k6YoRG346tPgD"
          readOnly: true
        created_at:
          $ref: "#/components/schemas/ISODateTime"
        updated_at:
          $ref: "#/components/schemas/ISODateTime"
      required:
        - uid
        - created_at
        - updated_at
    
    DeletedEntity:
      title: "Deleted entity"
      type: object
      properties:
          uid:
            type: string
            format: nanoid
            example: "njbusD52k6YoRG346tPgD"
            readOnly: true
          updated_at:
            $ref: "#/components/schemas/ISODateTime"
          deleted:
            type: boolean
            example: true
            readOnly: true
      required:
        - uid
        - updated_at
        - deleted
    
    User:
      anyOf:
        - title: User
          allOf:
            - $ref: "#/components/schemas/BaseEntity"
            - type: object
              properties:
                username:
                  type: string
                  example: neo
                name:
                  type: string
                  example: "Thomas A. Anderson"
                icon:
                  type: string
                  example: "https://shantichat.github.io/avacats/120x120/99.jpg"
                  readOnly: true
                timezone:
                  type: string
                  example: "America/Chicago"
                ext:
                  type: object
                  properties:
                    bot:
                      type: boolean
                      readOnly: true
              required:
                - name
                - icon
        - $ref: "#/components/schemas/DeletedEntity"
    
    Invite:
      anyOf:
        - title: Invite information
          allOf:
            - $ref: "#/components/schemas/BaseEntity"
            - type: object
              properties:
                code:
                  $ref: "#/components/schemas/InviteCode"
                used_at:
                  $ref: "#/components/schemas/ISODateTime"
                invitee:
                  $ref: "#/components/schemas/User"
              required:
                - code
                - created_at
        - $ref: "#/components/schemas/DeletedEntity"
    
    InviteCode:
      type: string
      example: "h8mTUVPCZSQ3uVPi9Tk90kKnPyc4Hhf4vYUwSVYN10U0Z3vSKD1MZGwyKdNNqcPN" 
      required: true
    
    InvitePreview:
      tilte: Inite preivew
      type: object
      properties:
        inviter:
          $ref: "#/components/schemas/User"
        is_used:
          type: boolean
          example: false
          readOnly: true
        required:
          - inviter
          - is_used

    ISODateTime:
      type: string
      format: date-time
      example: "1999-03-31 15:00:00.000"
      readOnly: true
